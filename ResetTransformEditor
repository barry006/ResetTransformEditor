using UnityEditor;
using UnityEngine;
namespace Git.Tools
{
    public class ResetTransformEditor : EditorWindow
    {
        KeyCode _customKey = KeyCode.F1;
        Event _e = null;

        [MenuItem("Tools/Reset Transform")]
        static void ShowWindow() => GetWindow<ResetTransformEditor>("Reset Transform");

        void OnEnable() => EditorApplication.update += EditorUpdate;
        void OnDisable() => EditorApplication.update -= EditorUpdate;

        void ResetTransform(Transform _transform) => (_transform.position, _transform.rotation, _transform.localScale) = (Vector3.zero, Quaternion.identity, Vector3.one);
        void ResetTransformAllChild(Transform parent) { foreach (Transform child in parent) { RecordUndoAndMarkDirty(child); ResetTransform(child); ResetTransformAllChild(child); } }
        void RecordUndoAndMarkDirty(Transform t) { Undo.RecordObject(t, "Reset Transform"); EditorUtility.SetDirty(t); }

        void EditorUpdate()
        {
            if (!Selection.activeTransform) return;

            if (_e?.type == EventType.KeyDown && _e.keyCode == _customKey)
                foreach (Transform t in Selection.transforms) { RecordUndoAndMarkDirty(t); ResetTransform(t); }

            if (_e?.type == EventType.KeyDown && _e.control && _e.keyCode == _customKey)
                ResetTransformAllChild(Selection.activeTransform);
        }      

        void OnGUI() { _e = Event.current; GUILayout.Label("Assign Shortcut", EditorStyles.boldLabel); _customKey = (KeyCode)EditorGUILayout.EnumPopup("Shortcut Key", _customKey); }
    }
}
